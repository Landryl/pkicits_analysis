(* ==THEORY== *)
free c:channel.

(************************* ELLIPTIC CURVE EQUATIONS ***************************)

(* Theses equations are required for the modeling of ECIES. See ECIES section
   for a higher-level of abstraction *)

type point.
type scalar.

const G: point [data].
fun mul(scalar, point): point.
equation forall x: scalar, y: scalar; mul(y, mul(x, G)) = mul(x, mul(y, G)).

(* For lisibility, conversions functions that are closer to usual conventions
   seen in other ProVerif models *)

type skey.
type pkey.

fun skey_to_scalar(skey): scalar [data, typeConverter].
fun pkey_to_point(pkey): point [data, typeConverter].

fun pk(skey): pkey.
equation forall x:skey; pkey_to_point(pk(x)) = mul(skey_to_scalar(x), G).

(* Required to allow encryption of public keys *)
fun pkey_to_bitstring(pkey): bitstring [data, typeConverter].

(*************************** SYMMETRIC ENCRYPTION *****************************)

type key.

(* As stated in ProVerif user manual, basic encryption is already authenticated,
   so no need for a MAC key *)
fun kdf(point): key.

(* Used to encrypt message, implemented using AES-CCM in the standard *)
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.

(* Used to encrypt keys, implemented using XOR in the standard *)
fun senck(key, key): bitstring.
reduc forall km: key, k: key; sdeck(senck(km, k), k) = km.

(******************************** SIGNATURES **********************************)

fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, sk: skey; getmsg(sign(m, sk)) = m.
reduc forall m: bitstring, sk: skey; checksign(sign(m, sk), pk(sk)) = true.

(********************************** HASHES ************************************)

(* Hmac used in ATRequest *)
type hkey.

fun hmac(bitstring, hkey): bitstring.
reduc forall m: bitstring, k: hkey; checkhmac(hmac(m, k), k) = true.

(* Hash used in external payload structures *)

fun hash(bitstring): bitstring.
reduc forall m: bitstring; checkhash(hash(m), m) = true.

(*********************************** ECIES ************************************)

(* In ETSI 102 941, annex E, encryption is done using the following protocol:
    - A symmetric key is generated
    - The message is encrypted using it
    - A random private assymetric key is generated
    - A shared secret using it with the CA public key is created
    - This shared secret is fed into a key derivation function
    - Keys extracted are used to encrypt the symmetric key with XOR, and provide
      a HMAC

   Since ProVerif uses rule rewriting to simulate decryption mechanisms, the
   encryption is already authenticated (see ProVerif user manual) *)

(* Encrypt a message following the specifications provided in Etsi102941
   annex E. Returns a tuple (m, k), m being a tuple containing the encrypted
   message and all the necessary to decrypt it, and k being the symmetric AES
   key that can be reused notably to decrypt the response

   Parameters:
    m: the message to encrypt
    pk: the public key of the recipient
*)
letfun ecies_enc(m:bitstring, pk:pkey) =
    new k:key;
    new r:scalar;
    let V = mul(r, G) in
    let S = mul(r, pkey_to_point(pk)) in
    let derived_key = kdf(S) in
    ( (senc(m, k), senck(k, derived_key), V), k ).

(* Decrypts a message that has been encrypted following Etsi102941 annex E.

   Parameters:
    m: a tuple (m, k, V) made of a symmetricaly encrypted message, following by
       its encrypted respective key using ECIES and V as defined in the standard
    sk: the private key of the recipient
*)
letfun ecies_dec(m:bitstring, sk:skey) =
    let (encrypted_msg:bitstring, encrypted_key:bitstring, V:point) = m in
    let S = mul(skey_to_scalar(sk), V) in
    let derived_key = kdf(S) in
    let k = sdeck(encrypted_key, derived_key) in
    (sdec(encrypted_msg, k), k).

(******************************************************************************)

(* ==PROTOCOL== *)

let Station(sks:skey, pkaa:pkey, pkea:pkey, enrolmentSKey: skey(*, EC:bitstring*)) =
    (* Make request - Etsi 102941 6.2.3.3.1 *)
    new verificationSKey:skey;
    let verificationPKey = pk(verificationSKey) in

    (** Making the SharedATRequest **)
    new hmacKey:hkey;
    let keytag = hmac(pkey_to_bitstring(verificationPKey), hmacKey) in
    let sharedATRequestHash = hash(keytag) in

    (** Making the ECSignature encrypted for EA **)
    let signedExternalPayload = sign(sharedATRequestHash, enrolmentSKey) in
    let (ECSignature:bitstring, kea:key) = ecies_enc(signedExternalPayload, pkea) in

    (** enc(ECSignature + SharedATRequest + publicKeys + hmacKey) **)
    let innerATRequest = (ECSignature, keytag, verificationPKey, hmacKey) in

    (** This model an authorization request message without POP *)
    (** To model with POP, innerATRequest should be signed before encryption **)

    let (m:bitstring, k:key) = ecies_enc(innerATRequest, pkaa) in

    out(c, m);

    in(c, resm:bitstring);
    let res = sdec(resm, k) in
    (* Checking station temporary key has been signed by AA *)
    if checksign(res, pkaa) then 0.

let Authorities(skaa:skey, skea:skey, pks:pkey, pkea:pkey, pkaa:pkey, enrolmentPKey:pkey) =
    (* RECEIVE AUTHORIZATION REQUEST MESSAGE *)
    in(c, m:bitstring);
    let (request:bitstring, k:key) = ecies_dec(m, skaa) in
    let (ECSignature:bitstring, keytag:bitstring, verificationPKey:pkey,
         hmacKey:hkey) = request in

    (* Checking if the keytag is correct *)
    if checkhmac(keytag, hmacKey) then

    (* Ask AA authorization validation *)
    let tbsData = (ECSignature, keytag) in
    let signedValidationRequest = sign(tbsData, skaa) in
    let (validationRequest:bitstring, kvr:key) =
        ecies_enc(signedValidationRequest, pkea) in

    (* SEND AUTHORIZATION VALIDATION REQUEST MESSAGE *)
    (* EA PART ****************************************************************)

    let (validationRequest:bitstring, k:key) =
        ecies_dec(validationRequest, skea) in

    let (ecSignature:bitstring, keytag:bitstring) = getmsg(validationRequest) in

    let (signedExternalPayload:bitstring, ks:key) = ecies_dec(ecSignature, skea) in

    if checksign(signedExternalPayload, enrolmentPKey) then
    let externalPayload = getmsg(signedExternalPayload) in
    if checkhash(externalPayload, keytag) then

    (* The SharedATRequest hash matches the one signed by station, the request
       is genuine. *)

    let requestHash = hash(validationRequest) in
    let signedResponse = sign(requestHash, skea) in
    let res = senc(signedResponse, k) in

    (* END EA PART ************************************************************)
    (* RECEIVE AUTHORIZATION VALIDATION RESPONSE MESSAGE *)

    let validationResponse = sdec(res, kvr) in
    if checksign(validationResponse, pkea) then
    let requestHash = getmsg(validationResponse) in
    if checkhash(requestHash, validationRequest) then

    (* Returned hash is the same as SharedATRequest the AA has, it mean the EA
       has approved the authorization *)

    (* Making the AT *)
    let AT = sign(pkey_to_bitstring(verificationPKey), skaa) in

    (* Usually the AT contains more information, not only a signature. The whole
       structure is then signed before encryption. *)

    (* SEND AUTHORIZATION RESPONSE MESSAGE *)
    out(c, senc(AT, k));

    0.

process
    ! new idsks:skey; new skea:skey; new skaa:skey; new enrolmentSKey:skey;
    ! (
        (Authorities(skea, skaa, pk(idsks), pk(skea), pk(skaa), pk(enrolmentSKey)))
      | (Station(idsks, pk(skaa), pk(skea), enrolmentSKey))
    )
