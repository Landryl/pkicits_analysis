free c:channel.

(*********************************** ECIES ************************************)

(* The internals of ECIES are not modeled to limit complexity. Abstracted, it
   behaves in a similar way to asymetric encryption. The only difference is that
   a symmetric key is included in the request, that must be used to encrypt the
   response.
*)

type skey.
type pkey.
type key.

fun pk(skey): pkey.

fun ecies_enc(bitstring, pkey, key): bitstring.
reduc forall m: bitstring, sk: skey, k:key; ecies_dec(ecies_enc(m, pk(sk), k), sk) = (m, k).

fun enc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; dec(enc(m, k), k) = m.

(******************************** SIGNATURES **********************************)

fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, sk: skey; getmsg(sign(m, sk)) = m.
reduc forall m: bitstring, sk: skey; checksign(sign(m, sk), pk(sk)) = true.

(********************************** HASHES ************************************)

type hkey.

fun hmac(bitstring, hkey): bitstring.
reduc forall m: bitstring, k: hkey; checkhmac(hmac(m, k), k) = true.

(* Hash used in external payload structures *)
fun hash(bitstring): bitstring.
reduc forall m: bitstring; checkhash(hash(m), m) = true.

(***********************************  MISC  ***********************************)

(* Required to allow encryption of public keys *)
fun pkey_to_bitstring(pkey): bitstring [data, typeConverter].

(******************************************************************************)
