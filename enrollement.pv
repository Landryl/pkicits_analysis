(******************************************************************************)
(* Elliptic Curve Equations *)
type point.
type scalar.

const G: point [data].
fun mul(scalar, point): point.
equation forall x: scalar, y: scalar; mul(y, mul(x, G)) = mul(x, mul(y, G)).

(* For lisibility, conversions functions *)
type skey.
type pkey.
fun skey_to_scalar(skey): scalar [data, typeConverter].
fun pkey_to_point(pkey): point [data, typeConverter].

fun pk(skey): pkey.
equation forall x:skey; pkey_to_point(pk(x)) = mul(skey_to_scalar(x), G).

fun pkey_to_bitstring(pkey): bitstring [data, typeConverter].

(* Symmetric encryption *)
type key.

(* As stated in ProVerif user manual, basic encryption is already authenticated,
   so no need for a MAC key *)
fun kdf(point): key.

(* Used to encrypt message, implemented using AES in the standard *)
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.

(* Used to encrypt keys, implemented using XOR in the standard *)
fun senck(key, key): bitstring.
reduc forall km: key, k: key; sdeck(senck(km, k), k) = km.

fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, sk: skey; getmsg(sign(m, sk)) = m.
reduc forall m: bitstring, sk: skey; checksign(sign(m, sk), pk(sk)) = true.

(******************************************************************************)

free c:channel.
free InnerECRequest:bitstring [private].

event StationSentECRequest.
event StationReceivedECResponse.
event EAReceivedECRequest.
event EASentECResponse.

(* confidentiality of the canonical key *)
query attacker(new sks).

(* authentication of response should hold *)
query inj-event(StationReceivedECResponse) ==> inj-event(EASentECResponse).

(* authentication of request does not hold *)
query inj-event(EAReceivedECRequest) ==> inj-event(StationSentECRequest).

let Station(sks:skey, pkea:pkey) =
    (* Make request - Etsi 102941 6.2.3.2.1 *)
    new verificationSKey:skey;
    let verificationPKey = pk(verificationSKey) in
    let tbsKey = pkey_to_bitstring(verificationPKey) in

    (* Proof of Possession *)
    let inner_request = sign(tbsKey, verificationSKey) in
    let outer_request = sign(inner_request, sks) in

    event StationSentECRequest;

    (* Encrypt request using a fresh key *)
    new k:key;
    out(c, senc(outer_request, k));

    (* Send fresh key using ECIES *)
    new r:scalar;
    let V = mul(r, G) in
    let S = mul(r, pkey_to_point(pkea)) in
    let derived_key = kdf(S) in
    out(c, senck(k, derived_key));
    out(c, V);

    (* Receive answer *)
    in(c, encrypted_answer:bitstring);
    let answer = sdec(encrypted_answer, k) in
    if checksign(answer, pkea) then
        event StationReceivedECResponse.

let EnrollementAuthority(skea:skey, pks:pkey) =
    (* Receive encrypted request *)
    in(c, encrypted_request:bitstring);

    (* Receive encrypted key *)
    in(c, encrypted_key:bitstring);
    in(c, V:point);

    (* Decryption *)
    let S = mul(skey_to_scalar(skea), V) in
    let derived_key = kdf(S) in
    let k = sdeck(encrypted_key, derived_key) in
    let request = sdec(encrypted_request, k) in

    (* Process the request *)
    event EAReceivedECRequest;

    (* Send request results *)
    event EASentECResponse;
    new cert:bitstring;
    out(c, senc(cert, k)).

process
    new sks:skey;
    new skea:skey;
    (     (!Station(sks, pk(skea)))
        | (!EnrollementAuthority(skea, pk(sks)))
    )
